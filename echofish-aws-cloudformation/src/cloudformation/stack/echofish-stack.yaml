AWSTemplateFormatVersion: 2010-09-09
Description: EchoFish Stack

Parameters:
  OutputBucketUserAccessKeyPsName:
    Type: String
  OutputBucketUserSecretAccessKeyPsName:
    Type: String
  DevOutputBucketUserAlias:
    Type: String
    Default: ""
  RawSourceBucket:
    Type: String
    Default: "noaa-wcsd-pds"
  RawSourceBucketRegion:
    Type: String
    Default: "us-east-1"
  OutputBucketName:
    Type: String
    Default: "noaa-wcsd-zarr-pds"
  OutputBucketRegion:
    Type: String
    Default: "us-east-1"
  CalibrationBucket:
    Type: String
    Description: Bucket where cruise-level calibration file exists.
    Default: "noaa-wcsd-pds-index"
  CalibrationFileKey:
    Type: String
    Description: Cruise-level calibration data provided by Chuck Anderson.
    Default: "calibrated_cruises.csv"
  StackPrefix:
    Description: A prefix that identifies this stack
    Type: String
  RolePermissionsBoundary:
    Description: An optional permissions boundary to associate with roles
    Type: String
    Default: ""
  LogRetentionInDays:
    Type: Number
    Default: 30

  LambdaConcurrency:
    Type: Number
    MinValue: 1
    Default: 5

  ### [Step 0] Indexing ###
  IndexingLambdaImageTag:
    Type: String
    Default: 1.0.0.dev20230706165704
  IndexingLambdaMemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 5000
  IndexingLambdaTimeout:
    Type: Number
    MinValue: 1
    MaxValue: 900
    Default: 900

  ### [Step 1] Cruise Splitter ###
  CruiseSplitterLambdaMemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 1024
  CruiseSplitterLambdaTimeout:
    Type: Number
    MinValue: 1
    MaxValue: 900
    Default: 240
#  CruiseSplitterLambdaConcurrency:
#    Type: Number
#    MinValue: 1
#    Default: 3

  ### [Step 2a] Raw to Zarr ###
  RawToZarrLambdaImageTag:
    Type: String
    Default: 1.0.0.dev20230724211819
  RawToZarrLambdaMemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 10240
  RawToZarrLambdaEphemeralStorageSize:
    Type: Number
    MinValue: 512
    MaxValue: 10240
    Default: 10240
  RawToZarrLambdaTimeout:
    Type: Number
    MinValue: 1
    MaxValue: 900
    Default: 900
#  RawToZarrLambdaConcurrency:
#    Type: Number
#    MinValue: 1
#    Default: 3

  ### [Step 2b] Raw to Zarr Error Handler ###
  RawToZarrErrorLambdaMemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 1024
  RawToZarrErrorLambdaTimeout:
    Type: Number
    MinValue: 1
    MaxValue: 900
    Default: 240
#  RawToZarrErrorLambdaConcurrency:
#    Type: Number
#    MinValue: 1
#    Default: 3

  ### [Step 3] Zarr Cruise Accumulator ###
  ZarrCruiseAccumulatorLambdaMemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 512  # TODO: can this be less?
  ZarrCruiseAccumulatorLambdaTimeout:
    Type: Number
    MinValue: 1
    MaxValue: 900
    Default: 240

  ### [Step 4] Create Empty Zarr Store ### # TODO: "CreateCruiseZarrStoreLambda"
#  CreateEmptyZarrStoreLambdaImageTag:
#    Type: String
#    Default: 1.0.0.dev20230705184439
  CreateEmptyZarrStoreLambdaMemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 2048
  CreateEmptyZarrStoreLambdaEphemeralStorageSize:
    Type: Number
    MinValue: 512
    MaxValue: 10240
    Default: 512
  CreateEmptyZarrStoreLambdaTimeout:
    Type: Number
    MinValue: 1
    MaxValue: 900
    Default: 600
  CreateEmptyZarrStoreLambdaConcurrency:
    Type: Number
    MinValue: 1
    Default: 3

  ### [Step 5] Resample and Write to Zarr Store ###
  ResampleAndWriteToZarrStoreLambdaImageTag:
    Type: String
    Default: 1.0.0.dev20230724172102
  ResampleAndWriteToZarrStoreLambdaMemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 10240
    Default: 2048
  ResampleAndWriteToZarrStoreLambdaEphemeralStorageSize:
    Type: Number
    MinValue: 512
    MaxValue: 10240
    Default: 1024
  ResampleAndWriteToZarrStoreLambdaTimeout:
    Type: Number
    MinValue: 1
    MaxValue: 900
    Default: 600
#  ResampleAndWriteToZarrStoreLambdaConcurrency:
#    Type: Number
#    MinValue: 1
#    Default: 3

Conditions:
  CruiseSplitterLambdaIsRelease:
    Fn::Equals:
      - @CruiseSplitterLambda.version@
      - Fn::Join:
          - ""
          - Fn::Split:
              - "-SNAPSHOT"
              - @CruiseSplitterLambda.version@
  ZarrCruiseAccumulatorLambdaIsRelease:
    Fn::Equals:
      - @ZarrCruiseAccumulatorLambda.version@
      - Fn::Join:
          - ""
          - Fn::Split:
              - "-SNAPSHOT"
              - @ZarrCruiseAccumulatorLambda.version@
  RawToZarrErrorLambdaIsRelease:
    Fn::Equals:
      - @RawToZarrErrorLambda.version@
      - Fn::Join:
          - ""
          - Fn::Split:
              - "-SNAPSHOT"
              - @RawToZarrErrorLambda.version@
  BucketDrainLambdaIsRelease:
    Fn::Equals:
      - @RawToZarrErrorLambda.version@
      - Fn::Join:
          - ""
          - Fn::Split:
              - "-SNAPSHOT"
              - @RawToZarrErrorLambda.version@
  CreateEmptyZarrStoreLambdaIsRelease:
    Fn::Equals:
      - @CreateEmptyZarrStoreLambda.version@
      - Fn::Join:
          - ""
          - Fn::Split:
              - "-SNAPSHOT"
              - @CreateEmptyZarrStoreLambda.version@

Resources:
  DynamoDbStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackPrefix: !Ref StackPrefix
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/dynamo-db-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  MessagingStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackPrefix: !Ref StackPrefix
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/messaging-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  BucketStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackPrefix: !Ref StackPrefix
        EnvironmentType:
          Fn::ImportValue: !Sub ${StackPrefix}-echofish-environment-type
        PermissionsBoundary: !Ref RolePermissionsBoundary
        DeploymentBucketName:
          Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket
        BucketDrainLambdaVersion: !If [ BucketDrainLambdaIsRelease, @BucketDrainLambda.version@, @BucketDrainLambda.version@@dashTimestamp@ ]
        DevOutputBucketUserAlias: !Ref DevOutputBucketUserAlias
        OutputBucketName: !Ref OutputBucketName
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/bucket-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  ### [Step 0] Indexing ### This is convenience function, not related to pipeline
  IndexingLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        RolePermissionsBoundary: !Ref RolePermissionsBoundary
        LogRetentionInDays: !Ref LogRetentionInDays
        ImageTag: !Ref IndexingLambdaImageTag
        MemorySize: !Ref IndexingLambdaMemorySize
        Timeout: !Ref IndexingLambdaTimeout
        IndexTableName:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.IndexTableName
        IndexTableArn:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.IndexTableArn
        RawSourceBucket: !Ref RawSourceBucket
        CalibrationBucket: !Ref CalibrationBucket
        CalibrationFileKey: !Ref CalibrationFileKey
        TopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.IndexLambdaTopicArn
        DeadLetterTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.IndexDeadLetterTopicArn
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/indexing-lambda-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  ### [Step 1] Cruise Splitter ###
  # Start the pipeline by prompting this lambda with a json message, e.g.:
  # {"shipName": "Henry_B._Bigelow","cruiseName": "HB0707","sensorName": "EK60"}
  CruiseSplitterLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        EnvironmentType:
          Fn::ImportValue: !Sub ${StackPrefix}-echofish-environment-type
        DeploymentBucketName:
          Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket
        RolePermissionsBoundary: !Ref RolePermissionsBoundary
        LogRetentionInDays: !Ref LogRetentionInDays
        Version: !If [CruiseSplitterLambdaIsRelease, @CruiseSplitterLambda.version@, @CruiseSplitterLambda.version@@dashTimestamp@]
        MemorySize: !Ref CruiseSplitterLambdaMemorySize
        Timeout: !Ref CruiseSplitterLambdaTimeout
        MaxConcurrency: !Ref LambdaConcurrency # CruiseSplitterLambdaConcurrency
        FileInfoTableArn:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableArn
        FileInfoTableName:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableName
        InputBucketName: !Ref RawSourceBucket
        InputBucketRegion: !Ref RawSourceBucketRegion
        TopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.CruiseSplitterLambdaTopicArn
        DoneTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.RawToZarrLambdaTopicArn
        DeadLetterTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.CruiseSplitterDeadLetterTopicArn
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/cruise-splitter-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  ### [Step 2a] Raw to Zarr ###
  RawToZarrLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        EnvironmentType:
          Fn::ImportValue: !Sub ${StackPrefix}-echofish-environment-type
        RolePermissionsBoundary: !Ref RolePermissionsBoundary
        LogRetentionInDays: !Ref LogRetentionInDays
        ImageTag: !Ref RawToZarrLambdaImageTag
        MemorySize: !Ref RawToZarrLambdaMemorySize
        EphemeralStorageSize: !Ref RawToZarrLambdaEphemeralStorageSize
        Timeout: !Ref RawToZarrLambdaTimeout
        MaxConcurrency: !Ref LambdaConcurrency # RawToZarrLambdaConcurrency
        FileInfoTableArn:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableArn
        FileInfoTableName:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableName
        RawSourceBucket: !Ref RawSourceBucket
        OutputBucket:
          Fn::GetAtt:
            - BucketStack
            - Outputs.OutputBucketName
        OutputBucketUserAccessKeyPsName: !Ref OutputBucketUserAccessKeyPsName
        OutputBucketUserSecretAccessKeyPsName: !Ref OutputBucketUserSecretAccessKeyPsName
        TopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.RawToZarrLambdaTopicArn
        DoneTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ZarrCruiseAccumulatorLambdaTopicArn
        DeadLetterTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.RawToZarrDeadLetterTopicArn
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/raw-to-zarr-lambda-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  ### [Step 2b] Raw to Zarr Error Handler ###
  RawToZarrErrorLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        DeploymentBucketName:
          Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket
        RolePermissionsBoundary: !Ref RolePermissionsBoundary
        Timeout: !Ref RawToZarrErrorLambdaTimeout
        MaxConcurrency: !Ref LambdaConcurrency # RawToZarrErrorLambdaConcurrency
        MemorySize: !Ref RawToZarrErrorLambdaMemorySize
        LogRetentionInDays: !Ref LogRetentionInDays
        Version: !If [ RawToZarrErrorLambdaIsRelease, @RawToZarrErrorLambda.version@, @RawToZarrErrorLambda.version@@dashTimestamp@ ]
        FileInfoTableArn:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableArn
        FileInfoTableName:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableName
        TopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.RawToZarrDeadLetterTopicArn
        AccumulatorTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ZarrCruiseAccumulatorLambdaTopicArn
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/raw-to-zarr-error-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  ### [Step 3] Zarr Cruise Accumulator ###
  ZarrCruiseAccumulatorLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        DeploymentBucketName:
          Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket
        RolePermissionsBoundary: !Ref RolePermissionsBoundary
        Timeout: !Ref ZarrCruiseAccumulatorLambdaTimeout
        MemorySize: !Ref ZarrCruiseAccumulatorLambdaMemorySize
        LogRetentionInDays: !Ref LogRetentionInDays
        Version: !If [ ZarrCruiseAccumulatorLambdaIsRelease, @ZarrCruiseAccumulatorLambda.version@, @ZarrCruiseAccumulatorLambda.version@@dashTimestamp@ ]
        FileInfoTableArn:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableArn
        FileInfoTableName:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableName
        TopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ZarrCruiseAccumulatorLambdaTopicArn
        DoneTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.CreateEmptyZarrStoreLambdaTopicArn
        DeadLetterTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ZarrCruiseAccumulatorDeadLetterTopicArn  # TODO: why doesn't this point to the CreateEmptyZarrStoreDeadLetterTopicArn?
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/zarr-cruise-accumulator-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  ### [Step 4] Create Empty Zarr Store ###
  CreateEmptyZarrStoreLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        EnvironmentType:
          Fn::ImportValue: !Sub ${StackPrefix}-echofish-environment-type
        DeploymentBucketName:
          Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket
        RolePermissionsBoundary: !Ref RolePermissionsBoundary
        LogRetentionInDays: !Ref LogRetentionInDays
        Version: !If [ CreateEmptyZarrStoreLambdaIsRelease, @CreateEmptyZarrStoreLambda.version@, @CreateEmptyZarrStoreLambda.version@@dashTimestamp@ ]
        MemorySize: !Ref CreateEmptyZarrStoreLambdaMemorySize
        EphemeralStorageSize: !Ref CreateEmptyZarrStoreLambdaEphemeralStorageSize
        Timeout: !Ref CreateEmptyZarrStoreLambdaTimeout
        MaxConcurrency: !Ref LambdaConcurrency # CreateEmptyZarrStoreLambdaConcurrency
        FileInfoTableArn:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableArn
        FileInfoTableName:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableName
        OutputBucket:
          Fn::GetAtt:
            - BucketStack
            - Outputs.OutputBucketName
        OutputBucketRegion:
          Fn::GetAtt:
            - BucketStack
            - Outputs.OutputBucketRegion
        OutputBucketUserAccessKeyPsName: !Ref OutputBucketUserAccessKeyPsName
        OutputBucketUserSecretAccessKeyPsName: !Ref OutputBucketUserSecretAccessKeyPsName
        TopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.CreateEmptyZarrStoreLambdaTopicArn
        DoneTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ResampleAndWriteToZarrStoreLambdaTopicArn
        DeadLetterTopicArn: # TODO: why doesn't this have its own DLQ?
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ResampleAndWriteToZarrStoreDeadLetterTopicArn
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/create-empty-zarr-store-lambda-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket

  ### [Step 5] Resample and Write to Zarr Store ###
  ResampleAndWriteToZarrStoreLambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        EnvironmentType:
          Fn::ImportValue: !Sub ${StackPrefix}-echofish-environment-type
        RolePermissionsBoundary: !Ref RolePermissionsBoundary
        LogRetentionInDays: !Ref LogRetentionInDays
        ImageTag: !Ref ResampleAndWriteToZarrStoreLambdaImageTag
        MemorySize: !Ref ResampleAndWriteToZarrStoreLambdaMemorySize
        EphemeralStorageSize: !Ref ResampleAndWriteToZarrStoreLambdaEphemeralStorageSize
        Timeout: !Ref ResampleAndWriteToZarrStoreLambdaTimeout
        MaxConcurrency: !Ref LambdaConcurrency # ResampleAndWriteToZarrStoreLambdaConcurrency
        FileInfoTableArn:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableArn
        FileInfoTableName:
          Fn::GetAtt:
            - DynamoDbStack
            - Outputs.FileInfoTableName
        OutputBucket:
          Fn::GetAtt:
            - BucketStack
            - Outputs.OutputBucketName
        OutputBucketUserAccessKeyPsName: !Ref OutputBucketUserAccessKeyPsName
        OutputBucketUserSecretAccessKeyPsName: !Ref OutputBucketUserSecretAccessKeyPsName
        TopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ResampleAndWriteToZarrStoreLambdaTopicArn
        DoneTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ProcessingFinishedTopicArn
        DeadLetterTopicArn:
          Fn::GetAtt:
            - MessagingStack
            - Outputs.ResampleAndWriteToZarrStoreDeadLetterTopicArn
      TemplateURL:
        Fn::Sub:
          - https://${DeploymentBucketName}.s3.${AWS::Region}.amazonaws.com/stack/nested/resample-and-write-to-zarr-store-lambda-stack.yaml
          - DeploymentBucketName:
              Fn::ImportValue: !Sub ${StackPrefix}-echofish-deployment-bucket


