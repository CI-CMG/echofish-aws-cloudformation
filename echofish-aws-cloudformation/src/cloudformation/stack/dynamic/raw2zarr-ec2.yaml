AWSTemplateFormatVersion: 2010-09-09
Description: EchoFish MVT Generator

Parameters:
  Version:
    Type: String
  EC2LogGroup:
    Type: String
  EC2InstanceProfile:
    Type: String
  ImageId:
    Type: String
  InstanceType:
    Type: String
  VolumeSizeGB:
    Type: Number
  SQSARN:
    Type: String
  SOURCEBUCKET:
    Type: String
  TARGETBUCKET:
    Type: String
  ECHOPYPETIMEOUT:
    Type: String
  STACKNAME:
    Type: String
  QUIETPERIODMS:
    Type: String
  MAXCONCURRENTUPLOADSPERCONSUMER:
    Type: String
  CONCURRENTCONSUMERS:
    Type: String
  DeploymentBucketName:
    Type: String

Resources:


  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - setup
            - run
        setup:
          packages:
            yum:
              awslogs: []
              docker: []
          files:
            '/docker.tar.gz':
              source: !Sub s3://${DeploymentBucketName}/docker/echofish-aws-raw2zarr-${Version}-docker.tar.gz
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = ${AWS::StackName}/{instance_id}/var/log/dmesg
                log_group_name = ${EC2LogGroup}
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = ${AWS::StackName}/{instance_id}/var/log/messages
                log_group_name = ${EC2LogGroup}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = ${AWS::StackName}/{instance_id}/var/log/secure
                log_group_name = ${EC2LogGroup}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = ${AWS::StackName}/{instance_id}/var/log/cron
                log_group_name = ${EC2LogGroup}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = ${AWS::StackName}/{instance_id}/var/log/cfn-init.log
                log_group_name = ${EC2LogGroup}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = ${AWS::StackName}/{instance_id}/var/log/cfn-hup.log
                log_group_name = ${EC2LogGroup}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = ${AWS::StackName}/{instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${EC2LogGroup}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = ${AWS::StackName}/{instance_id}/var/log/cloud-init-output.log
                log_group_name = ${EC2LogGroup}
                [/application/log/application.log]
                file = /application/log/application.log
                log_stream_name = ${AWS::StackName}/{instance_id}/application/log/application.log
                log_group_name = ${EC2LogGroup}
              mode: '000644'
              owner: root
              group: root
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=EC2Instance
                runas=root
            '/run.sh':
              content: !Sub |
                set -ex
                docker load -i /docker.tar.gz
                docker run -d \
                  -v $HOME/.aws:/root/.aws \
                  -e ECHOFISH_SQSARN \
                  -e ECHOFISH_SOURCEBUCKET \
                  -e ECHOFISH_TARGETBUCKET \
                  -e ECHOFISH_ECHOPYPETIMEOUT \
                  -e ECHOFISH_QUIETPERIODMS \
                  -e ECHOFISH_STACKNAME \
                  -e ECHOFISH_MAXCONCURRENTUPLOADSPERCONSUMER \
                  -e ECHOFISH_CONCURRENTCONSUMERS \
                  -v /application/log:/application/log \
                  cirescmg/echofish-aws-raw2zarr:${Version}
                while [ ${docker inspect -f {{.State.Health.Status}} mvtgen} != healthy ]
                do
                  sleep 2
                done
              mode: '000744'
              owner: root
              group: root
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                    - docker
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                    - awslogs
                files:
                  - '/etc/awslogs/awslogs.conf'
                  - '/etc/awslogs/awscli.conf'
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - '/etc/cfn/cfn-hup.conf'
                  - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
        run:
          commands:
            "01":
              env:
                ECHOFISH_SQSARN: !Ref SQSARN
                ECHOFISH_SOURCEBUCKET: !Ref SOURCEBUCKET
                ECHOFISH_TARGETBUCKET: !Ref TARGETBUCKET
                ECHOFISH_ECHOPYPETIMEOUT: !Ref ECHOPYPETIMEOUT
                ECHOFISH_STACKNAME: !Ref AWS::StackName
                ECHOFISH_QUIETPERIODMS: !Ref QUIETPERIODMS
                ECHOFISH_MAXCONCURRENTUPLOADSPERCONSUMER: !Ref MAXCONCURRENTUPLOADSPERCONSUMER
                ECHOFISH_CONCURRENTCONSUMERS: !Ref CONCURRENTCONSUMERS
              command: /run.sh
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Properties:
      EbsOptimized: false
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeSize: !Ref VolumeSizeGB
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          # Use the line below to ensure the CloudFormation helper scripts are updated to the latest version
          # Per: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html
          yum install -y aws-cfn-bootstrap
          retVal=$?
          if [ $retVal = 0 ]; then
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
              retVal=$?
          fi
          /opt/aws/bin/cfn-signal -e $retVal --stack ${AWS::StackName} --region ${AWS::Region} --resource=EC2Instance
