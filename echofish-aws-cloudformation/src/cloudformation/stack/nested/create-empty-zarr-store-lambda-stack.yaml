AWSTemplateFormatVersion: 2010-09-09
Description: Initializes an empty cruise-level Zarr store w proper shape and indexing

Parameters:
  RolePermissionsBoundary:
    Description: An optional permissions boundary to associate with roles
    Type: String
    Default: ""
#  DeploymentBucketName:
#    Type: String
  LogRetentionInDays:
    Type: Number
    Default: 30
  ImageTag:
    Type: String
#  Version:
#    Description: Version of the Java Application, e.g. "1.0.0-SNAPSHOT-20230725224017"
#    Type: String
  MemorySize:
    Type: Number
  EphemeralStorageSize:
    Type: Number
  Timeout:
    Type: Number
  MaxConcurrency:
    Type: Number
  FileInfoTableArn:
    Type: String
  FileInfoTableName:
    Type: String
  OutputBucket:
    Type: String
#  OutputBucketRegion:
#    Type: String
  OutputBucketUserAccessKeyPsName:
    Type: String
  OutputBucketUserSecretAccessKeyPsName:
    Type: String
  TopicArn:
    Type: String
  DeadLetterTopicArn:
    Type: String
  DoneTopicArn:
    Type: String


Conditions:
  HasPermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - ""
          - !Ref RolePermissionsBoundary

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::If:
          - HasPermissionsBoundary
          - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${RolePermissionsBoundary}
          - AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: Logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:logs:*:*:*
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
        - PolicyName: DynamoDB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !Ref FileInfoTableArn
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:DeleteItem'
        - PolicyName: SNS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !Ref DeadLetterTopicArn
                  - !Ref DoneTopicArn
                Action:
                  - 'sns:Publish'
        - PolicyName: S3  # TODO: do i need these credentials?
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                  - 's3:GetObject'
                  - 's3:GetObjectAcl'
                  - 's3:DeleteObject'
                  - 's3:AbortMultipartUpload'
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${OutputBucket}/*
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${OutputBucket}

#  Lambda:
#    Type: AWS::Lambda::Function
#    Properties:
#      Code:
#        S3Bucket: !Ref DeploymentBucketName
#        S3Key: !Sub lambda/echofish-aws-create-empty-zarr-store-lambda-${Version}-lambda.zip
#      Handler: edu.colorado.cires.cmg.echofish.aws.lambda.empyzarr.ZarrInitLambda::handleRequest
#      Runtime: java11
#      MemorySize: !Ref MemorySize
#      Timeout: !Ref Timeout
#      ReservedConcurrentExecutions: !Ref MaxConcurrency
#      Role: !GetAtt Role.Arn
#      Environment:
#        Variables:
#          TABLE_NAME: !Ref FileInfoTableName
#          OUTPUT_BUCKET: !Ref OutputBucket
#          BUCKET_REGION: !Ref OutputBucketRegion  # Needed by Java AWS tools
#          TOPIC_ARN: !Ref DoneTopicArn
#          OUTPUT_BUCKET_ACCESS_KEY: !Sub "{{resolve:ssm:${OutputBucketUserAccessKeyPsName}}}"
#          OUTPUT_BUCKET_SECRET_ACCESS_KEY: !Sub "{{resolve:ssm:${OutputBucketUserSecretAccessKeyPsName}}}"
#          LOG_LEVEL: info
#      EphemeralStorage:
#        Size: !Ref EphemeralStorageSize

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri: !Sub 118234403147.dkr.ecr.us-west-2.amazonaws.com/echofish-aws-create-empty-zarr-store-lambda:${ImageTag}
      PackageType: Image
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout
      ReservedConcurrentExecutions: !Ref MaxConcurrency
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref FileInfoTableName
          OUTPUT_BUCKET: !Ref OutputBucket
          OUTPUT_BUCKET_ACCESS_KEY: !Sub "{{resolve:ssm:${OutputBucketUserAccessKeyPsName}}}"
          OUTPUT_BUCKET_SECRET_ACCESS_KEY: !Sub "{{resolve:ssm:${OutputBucketUserSecretAccessKeyPsName}}}"
          TOPIC_ARN: !Ref DoneTopicArn
      EphemeralStorage:
        Size: !Ref EphemeralStorageSize


  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda
      Principal: sns.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Ref TopicArn

  LambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt Lambda.Arn
      TopicArn: !Ref TopicArn

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Lambda}
      RetentionInDays: !Ref LogRetentionInDays

  LambdaEvent:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref Lambda
      Qualifier: $LATEST
      MaximumRetryAttempts: 0
      DestinationConfig:
        OnFailure:
          Destination: !Ref DeadLetterTopicArn

  TopicSubscribePolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref TopicArn
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: SubscribeToTopic
            Resource: !Ref TopicArn
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sns:Subscribe
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt Lambda.Arn

  TopicPublishPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref DoneTopicArn
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublishToTopic
            Effect: Allow
            Resource: !Ref DoneTopicArn
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sns:Publish
            Condition:
              ArnEquals:
                aws:SourceArn:
                  - !GetAtt Lambda.Arn

  TopicDlqPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref DeadLetterTopicArn
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublishToTopic
            Effect: Allow
            Resource: !Ref DeadLetterTopicArn
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sns:Publish
            Condition:
              ArnEquals:
                aws:SourceArn:
                  - !GetAtt Lambda.Arn

Outputs:
  LambdaArn:
    Value: !GetAtt Lambda.Arn
  LambdaName:
    Value: !Ref Lambda
