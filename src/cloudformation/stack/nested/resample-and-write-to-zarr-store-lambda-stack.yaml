AWSTemplateFormatVersion: 2010-09-09
Description: Read file-level Zarr store, resample, and write to cruise-level Zarr store

Parameters:
  RolePermissionsBoundary:
    Description: An optional permissions boundary to associate with roles
    Type: String
    Default: ""
  LogRetentionInDays:
    Type: Number
    Default: 30
  ImageTag:
    Type: String
  MemorySize:
    Type: Number
  EphemeralStorageSize:
    Type: Number
  Timeout:
    Type: Number
  MaxConcurrency:
    Type: Number
  FileInfoTableArn:
    Type: String
  FileInfoTableName:
    Type: String
  OutputBucket:  # TODO: change to "OutputBucketName"
    Type: String
  OutputBucketUserAccessKeyPsName:
    Type: String
  OutputBucketUserSecretAccessKeyPsName:
    Type: String
  TopicArn:
    Type: String
  DeadLetterTopicArn:
    Type: String
  DoneTopicArn:
    Type: String
  VpcId:
    Type: String
#  RouteTableId:
#    Type: String
  SecurityGroupId:
    Type: String
  SubnetIds:
    Type: String

Conditions:
  HasPermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - ""
          - !Ref RolePermissionsBoundary

Resources:
  SynchronizerRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcId

  SynchronizerSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SynchronizerRouteTable
      SubnetId: !Ref SubnetIds

  SynchronizerRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: "igw-350cff4c"
      RouteTableId: !Ref SynchronizerRouteTable

  S3SynchronizerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref SynchronizerRouteTable
#        - rtb-9ae48fe1
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: "Gateway"
      VpcId: !Ref VpcId

  DynamoDBSynchronizerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref SynchronizerRouteTable
#        - rtb-9ae48fe1
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcEndpointType: "Gateway"
      VpcId: !Ref VpcId

  # working well
  SNSSynchronizerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.sns'
      SubnetIds:
        - !Ref SubnetIds
      VpcEndpointType: "Interface"
      VpcId: !Ref VpcId

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::If:
          - HasPermissionsBoundary
          - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${RolePermissionsBoundary}
          - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: Logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:logs:*:*:*
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
        - PolicyName: DynamoDB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !Ref FileInfoTableArn
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:DeleteItem'
        - PolicyName: SNS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !Ref DeadLetterTopicArn
                  - !Ref DoneTopicArn
                Action:
                  - 'sns:Publish'
        - PolicyName: S3  # TODO: do we need these credentials?
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${OutputBucket}/*
                Action:
                  - 's3:*Object*'
        - PolicyName: EFS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: "*"  # TODO: limit this to the EFS
                Action:
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeInstances'
                  - 'ec2:AttachNetworkInterface'


  ### EFS File System #### https://docs.aws.amazon.com/lambda/latest/dg/configuration-filesystem.html
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: "true"
      PerformanceMode: generalPurpose

  AccessPointResource:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref FileSystem
      PosixUser:
        Uid: "1001"
        Gid: "1001"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1001"
          OwnerUid: "1001"
          Permissions: "755"
        Path: "/mnt/zarr"

  MountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: SubnetIds
      SecurityGroups:
        - Ref: SecurityGroupId

  Lambda:
    Type: AWS::Lambda::Function
    DependsOn: MountTarget
    Properties:
      Code:
        ImageUri: !Sub 118234403147.dkr.ecr.us-west-2.amazonaws.com/echofish-aws-resample-and-write-to-zarr-store-lambda:${ImageTag}
      PackageType: Image
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout
      ReservedConcurrentExecutions: !Ref MaxConcurrency
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref FileInfoTableName
          OUTPUT_BUCKET: !Ref OutputBucket
          OUTPUT_BUCKET_ACCESS_KEY: !Sub "{{resolve:ssm:${OutputBucketUserAccessKeyPsName}}}"
          OUTPUT_BUCKET_SECRET_ACCESS_KEY: !Sub "{{resolve:ssm:${OutputBucketUserSecretAccessKeyPsName}}}"
          TOPIC_ARN: !Ref DoneTopicArn
      EphemeralStorage:
        Size: !Ref EphemeralStorageSize
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubnetIds
      FileSystemConfigs:
        - Arn: !GetAtt AccessPointResource.Arn
          LocalMountPath: "/mnt/zarr"

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda
      Principal: sns.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Ref TopicArn

  LambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt Lambda.Arn
      TopicArn: !Ref TopicArn

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Lambda}
      RetentionInDays: !Ref LogRetentionInDays

  LambdaEvent:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref Lambda
      Qualifier: $LATEST
      MaximumRetryAttempts: 0
      DestinationConfig:
        OnFailure:
          Destination: !Ref DeadLetterTopicArn

  TopicSubscribePolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref TopicArn
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: SubscribeToTopic
            Resource: !Ref TopicArn
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sns:Subscribe
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt Lambda.Arn

  TopicPublishPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref DoneTopicArn
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublishToTopic
            Effect: Allow
            Resource: !Ref DoneTopicArn
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sns:Publish
            Condition:
              ArnEquals:
                aws:SourceArn:
                  - !GetAtt Lambda.Arn

  TopicDlqPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref DeadLetterTopicArn
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublishToTopic
            Effect: Allow
            Resource: !Ref DeadLetterTopicArn
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sns:Publish
            Condition:
              ArnEquals:
                aws:SourceArn:
                  - !GetAtt Lambda.Arn


Outputs:
  LambdaArn:
    Value: !GetAtt Lambda.Arn
  LambdaName:
    Value: !Ref Lambda
